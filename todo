#!/usr/bin/env ruby

require 'colorize'
require 'rest-client'
require 'json'
require 'yaml'
require 'pry'
require "thor"
require 'awesome_print'

class Todo < Thor
  desc "hello NAME", "say hello to NAME"
  option :from

  desc "users", "List all username and passwords on system"
  def users
    load_config
    path = "/api/users"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = JSON.parse(attempt_action(:get,request_text))
    response_text["users"].each {|u| puts u}
  end

  desc "add_user", "Adds a user"
  option :username, :type => :string, :required => true
  option :password, :type => :string, :required => true
  def add_user
    load_config
    data = {"user" => {"username" => options[:username], "password" => options[:password]}}.to_json
    header_options = {:content_type => :json, :accept => :json}
    path = "/api/users"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = attempt_action(:post, request_text, data, header_options)
    puts response_text
  end

  desc "delete_user", "Delete a user by its ID"
  option :id, :type => :numeric, :required => true
  def delete_user
    load_config
    path = "/api/users"
    request_text = "http://#{@auth_string}#{@url}#{path}/#{options[:id]}"
    response_text = attempt_action(:delete, request_text)
    puts response_text
  end

  desc "viewable_lists", "Displays all lists set to viewable"
  def viewable_lists
    load_config
    path = "/api/lists"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = JSON.parse(attempt_action(:get,request_text))
    response_text["lists"].each {|u| puts u} unless response_text["lists"] == nil
  end

  desc "open_lists", "Displays all personal lists"
  def open_lists
    load_config
    path = "/api/users/#{@settings[:todo_user_id]}/lists"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = JSON.parse(attempt_action(:get,request_text))
    puts response_text["lists"].each {|u| puts u} unless response_text["lists"] == nil
  end

  desc "delete_list", "Delete a list by its ID"
  option :id, :type => :numeric, :required => true
  def delete_list
    load_config
    path = "/api/lists"
    request_text = "http://#{@auth_string}#{@url}#{path}/#{options[:id]}"
    response_text = attempt_action(:delete, request_text)
    puts response_text
  end

  desc "add_list", "Add a peronal list"
  option :name, :type => :string, :required => true
  option :permissions, :type => :string
  def add_list
    load_config
    data = {"list" => {"name" => options[:name]}}.to_json
    data["list"]["permissions"] = options[:permissions] if options["permissions"] != nil
    header_options = {:content_type => :json, :accept => :json}
    path = "/api/users/#{@settings[:todo_user_id]}/lists"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = attempt_action(:post, request_text, data, header_options)
    puts response_text
  end

  desc "edit_list", "Sets new value for list with ID"
  option :list_id, :type => :numeric, :required => true
  option :name, :type => :string
  option :permissions, :type => :string
  def edit_list
    load_config
    data = {"list" => {}}
    data["list"]["name"] = options[:name] if options[:name] != nil
    data["list"]["permissions"] = options[:permissions] if options[:permissions] != nil

    header_options = {:content_type => :json, :accept => :json}
    path = "/api/users/#{@settings[:todo_user_id]}/lists/#{options[:list_id]}"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = attempt_action(:put, request_text, data.to_json, header_options)
    puts response_text
  end

  desc "show_list", "Shows list based on list ID"
  option :list_id, :type => :numeric, :required => true
  def show_list
    load_config
    path = "/api/lists/#{options[:list_id]}"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = JSON.parse(attempt_action(:get,request_text))
    response_text["lists"].each {|l| puts l}
  end

  desc "add_item", "Add item to list"
  option :list_id, :type => :numeric, :required => true
  option :desc, :type => :string, :required => true
  def add_item
    load_config
    data = {"item" => {}}
    data["item"]["description"] = options[:desc] if options[:desc] != nil
    header_options = {:content_type => :json, :accept => :json}
    path = "/api/lists/#{options[:list_id]}/items"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = attempt_action(:post, request_text, data.to_json, header_options)
    puts response_text
  end

  desc "mark_complete", "Mark item complete"
  option :item_id, :type => :numeric, :required => true
  def mark_complete
    load_config
    path = "/api/items/#{options[:item_id]}"
    request_text = "http://#{@auth_string}#{@url}#{path}"
    response_text = attempt_action(:delete, request_text)
    puts response_text
  end



  no_commands do
    def attempt_action(action_as_symbol, *resource)
      begin
        return RestClient.send(action_as_symbol, *resource)
      rescue Exception => e
        puts "\t#{action_as_symbol} failed on #{resource}".colorize(:red)
        puts "\t#{e}".colorize(:red)
        abort ("\tTry again".colorize(:red))
      end
    end
    def load_config
      if File.exists?("settings.yml")
        @settings = YAML::load_file "settings.yml"
        begin
          user = @settings[:username]
          password = @settings[:password]
          @auth_string = "#{user}:#{password}@"
          @url = @settings[:url]
          path = "/api/users"
          request_text = "http://#{@auth_string}#{@url}#{path}"
          RestClient.get(request_text)
        rescue Exception => e
          puts "\tConfig read failure".colorize(color: :red, background: :yellow)
          message = e.inspect.to_s.colorize(:red)
          puts "\t#{message}".colorize(:red)
          puts "\trequest_text = #{request_text}".colorize(:red)  if request_text
          abort ("\tcheck config file and try again".colorize(:red))
        end
      else
        default_settings = {todo_user_id: "user_id_here", username: "username_here", password: "password_here", url: "url_here"}
        File.open("settings.yml", "w") {|f| f.write(default_settings.to_yaml)}
        puts "please edit config file before running again"
      end
    end
  end
end

Todo.start(ARGV)
